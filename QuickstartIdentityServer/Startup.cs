// Copyright (c) Brock Allen & Dominick Baier. All rights reserved. // Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.  using IdentityServer4; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.Extensions.DependencyInjection; using Microsoft.IdentityModel.Tokens; using System.IO; using System.Security.Cryptography.X509Certificates;  namespace QuickstartIdentityServer {     public class Startup     {         public void ConfigureServices(IServiceCollection services)         {             services.AddMvc(); 			services.AddIdentityServer() 				//.AddDeveloperSigningCredential() 				.AddSigningCredential(Certificate.GetCertificate()) 				.AddInMemoryIdentityResources(Config.GetIdentityResources()) 				.AddInMemoryApiResources(Config.GetApiResources()) 				.AddInMemoryPersistedGrants() 				.AddInMemoryClients(Config.GetClients()) 				.AddTestUsers(Config.GetUsers());  			services.AddAuthentication() 				.AddGoogle("Google", options => 				{ 					options.SignInScheme = IdentityServerConstants.ExternalCookieAuthenticationScheme;  					// register your IdentityServer with Google at https://console.developers.google.com 					// enable the Google+ API 					// set the redirect URI to http://localhost:port/signin-google 					options.ClientId = "copy client ID from Google here"; 					options.ClientSecret = "copy client secret from Google here"; 				}) 				.AddOpenIdConnect("oidc", "OpenID Connect", options => 				{ 					options.SignInScheme = IdentityServerConstants.ExternalCookieAuthenticationScheme; 					options.SignOutScheme = IdentityServerConstants.SignoutScheme;  					options.Authority = "https://identity.buyingagentapp.com/"; 					options.ClientId = "implicit";  					options.TokenValidationParameters = new TokenValidationParameters 					{ 						NameClaimType = "name", 						RoleClaimType = "role" 					}; 				}); 		}          public void Configure(IApplicationBuilder app, IHostingEnvironment env)         {             if (env.IsDevelopment())             {                 app.UseDeveloperExceptionPage();             } 			else 			{ 				app.UseExceptionHandler(); 			}  			app.UseIdentityServer();              app.UseStaticFiles();             app.UseMvcWithDefaultRoute();         }     } }